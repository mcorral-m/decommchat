#nullable enable
using System.Text.Json;
using System.Text.Json.Nodes;
using Microsoft.Agents.Builder;
using Microsoft.Agents.Builder.App;
using Microsoft.Agents.Builder.State;
using Microsoft.Agents.Core.Models;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.Agents;
using Microsoft.SemanticKernel.ChatCompletion;
using MyM365AgentDecommision.Bot.Interfaces;
using MyM365AgentDecommision.Bot.Services;

// Alias all decommission agent types to avoid name collisions
using Agents = MyM365AgentDecommision.Bot.Agents;

namespace MyM365AgentDecommision.Bot;

/// <summary>
/// Agents Builder bot host that bridges channel messages to the DecommissionAgent (SK).
/// Streams status, preserves chat history in turn state, and returns Text or Adaptive Card.
/// 
/// Features:
/// - Cluster filtering based on multiple criteria
/// - Eligibility assessment for decommissioning
/// - Scoring and ranking of decommission candidates
/// - Detailed analytics with factor breakdowns
/// - Visualization through Adaptive Cards
/// </summary>
public class DecomAgentBot : AgentApplication
{
    private readonly Kernel _kernel;
    private readonly IServiceProvider _serviceProvider;
    private Agents.DecommissionAgent _decomAgent = default!;
    
    // System.Text.Json options once
    private static readonly JsonSerializerOptions JsonOpts = new(JsonSerializerDefaults.Web)
    {
        WriteIndented = false
    };
    
    // Help message with example prompts
    private const string HelpMessage = @"## Decommission Agent Help
    
I can help analyze and identify clusters for decommissioning based on various factors including age, utilization, health, and more.

### Example prompts:
- ""Show me the top 10 decommission candidates""
- ""Filter clusters in region westus2 with low utilization""
- ""Which clusters have the highest score for decommissioning?""
- ""Check eligibility of cluster ABC123""
- ""Compare decommissioning factors between clusters XYZ and ABC""
- ""What metrics are used for scoring?""
- ""Show me clusters older than 5 years with low utilization""
- ""Generate a report on decommission candidates in JSON format""
- ""What makes a cluster a good candidate for decommissioning?""
- ""Help me understand why cluster XYZ has a high decommission score""

Type 'help' at any time to see this message again.";

    public DecomAgentBot(AgentApplicationOptions options, Kernel kernel, IServiceProvider serviceProvider) : base(options)
    {
        _kernel = kernel ?? throw new ArgumentNullException(nameof(kernel));
        _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));

        OnConversationUpdate(ConversationUpdateEvents.MembersAdded, WelcomeMessageAsync);
        OnActivity(ActivityTypes.Message, MessageActivityAsync, rank: RouteRank.Last);
    }

    protected async Task MessageActivityAsync(
        ITurnContext turnContext,
        ITurnState turnState,
        CancellationToken cancellationToken)
    {
        // Check if the user is asking for help
        string userMessage = turnContext.Activity.Text?.Trim().ToLowerInvariant() ?? string.Empty;
        if (userMessage == "help" || userMessage == "/help" || userMessage == "?")
        {
            await turnContext.SendActivityAsync(MessageFactory.Text(HelpMessage), cancellationToken);
            return;
        }

        // Create a scope from the main service provider and add turn-specific services
        using var scope = _serviceProvider.CreateScope();
        
        // Create a new service collection that includes both main services and turn-specific ones
        ServiceCollection services = new();
        
        // Add the main services by getting them from the scoped provider
        services.AddSingleton<IClusterDataProvider>(scope.ServiceProvider.GetRequiredService<IClusterDataProvider>());
        services.AddSingleton<ScoringService>(scope.ServiceProvider.GetRequiredService<ScoringService>());
        
        // Add turn-specific services
        services.AddSingleton<ITurnState>(turnState);
        services.AddSingleton<ITurnContext>(turnContext);
        services.AddSingleton<Kernel>(_kernel);
        
        var sp = services.BuildServiceProvider();

        // Let the user know we're working
        await turnContext.StreamingResponse.QueueInformativeUpdateAsync("Working on a response for youâ€¦");

        // Persist chat history across turns
        ChatHistory chatHistory = turnState.GetValue("conversation.chatHistory", () => new ChatHistory());

        // Create the SK agent (tools created via KernelPluginFactory inside the agent)
        _decomAgent = new Agents.DecommissionAgent(_kernel, sp);

        // Invoke the agent with the incoming text
        var agentResp = await _decomAgent.InvokeAsync(turnContext.Activity.Text ?? string.Empty, chatHistory);
        if (agentResp is null)
        {
            turnContext.StreamingResponse.QueueTextChunk("Sorry, I couldn't produce a response right now. Please try again or type 'help' for guidance on what you can ask me.");
            await turnContext.StreamingResponse.EndStreamAsync(cancellationToken);
            return;
        }

        // Track that we got a response (for conversation history)
        chatHistory.AddUserMessage(turnContext.Activity.Text ?? string.Empty);
        if (agentResp.Content is not null)
        {
            chatHistory.AddAssistantMessage(agentResp.Content.ToString() ?? string.Empty);
        }
        
        // --- IMPORTANT ---
        // Avoid referencing agentResp.Content/ContentType directly (prevents CS0229 ambiguity).
        // Serialize to JSON and read fields generically as strings.
        var envelopeJson = JsonSerializer.Serialize(agentResp, JsonOpts);
        var node = JsonNode.Parse(envelopeJson);

        var typeStr = node?["contentType"]?.ToString()?.Trim().ToLowerInvariant() ?? "text";
        var contentStr = node?["content"]?.ToString() ?? string.Empty;

        // Render back to the channel
        if (typeStr == "adaptive-card" || typeStr == "adaptivecard" || typeStr == "adaptive_card")
        {
            object? cardObj = null;
            try
            {
                // Channels typically want an object for Adaptive Card content
                cardObj = JsonSerializer.Deserialize<object>(contentStr);
            }
            catch
            {
                // Fall back to raw string if it's already a JSON-escaped string
                cardObj = contentStr;
            }

            turnContext.StreamingResponse.FinalMessage = MessageFactory.Attachment(new Attachment
            {
                ContentType = "application/vnd.microsoft.card.adaptive",
                Content = cardObj
            });
        }
        else
        {
            // Default to text
            var text = string.IsNullOrWhiteSpace(contentStr)
                ? "I couldn't format a response."
                : contentStr;
            turnContext.StreamingResponse.QueueTextChunk(text);
        }

        await turnContext.StreamingResponse.EndStreamAsync(cancellationToken);
    }

    protected async Task WelcomeMessageAsync(
        ITurnContext turnContext,
        ITurnState turnState,
        CancellationToken cancellationToken)
    {
        foreach (ChannelAccount member in turnContext.Activity.MembersAdded)
        {
            if (member.Id != turnContext.Activity.Recipient.Id)
            {
                await turnContext.SendActivityAsync(
                    MessageFactory.Text("ðŸ‘‹ Welcome to the Decommission Agent! I can help you identify, filter, score, and analyze clusters for decommissioning. Type 'help' to see what I can do and for example prompts."),
                    cancellationToken);
            }
        }
    }
}
